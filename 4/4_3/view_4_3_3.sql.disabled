-- The rules used here should be double checked
-- Code should be rewritten to improve performance during generation


DROP TYPE mess.function_4_3_3_type cascade;

CREATE TYPE mess.function_4_3_3_type AS 
(		  	
	gid bigint,
	value integer
);


--DROP FUNCTION mess.function_4_3_3(p_in geometry) cascade ;


CREATE OR REPLACE FUNCTION mess.function_4_3_3(p_in geometry) 
returns setof mess.function_4_3_3_type AS $BODY$
DECLARE
	returnrec mess.function_4_3_3_type;
	boundary geometry;
	expandby int := 1000; -- this should perhaps be bigger ; can't get box bigger than 2000 x 2000 meter
	default_value int := 0;
	max_area int ; 
	num_rows int;

BEGIN
	max_area = (expandby * 2) * (expandby * 2);

	RAISE NOTICE 'Max area is % ', max_area;

	
	CREATE TEMP TABLE  geo_omr(
		gid bigint,
		value integer,
		min_distance_trees integer,
		geo geometry(geometry,4258)
		
	);


		
	-- default value is -100
	IF ST_IsEmpty(p_in) THEN
		INSERT INTO geo_omr(gid,value,min_distance_trees,geo)   		
		SELECT pt1.gid, default_value AS value, -1,
		ST_Transform(ST_Expand(geom25833,expandby),4258)  as geo
		FROM mess.nor_pts AS pt1;
		GET DIAGNOSTICS num_rows = ROW_COUNT;

		SELECT ST_Envelope(ST_Extent(geom4258)) INTO boundary FROM mess.nor_pts;
	ELSE 
		
		INSERT INTO geo_omr(gid,value,min_distance_trees,geo)   		
		SELECT pt1.gid, default_value AS value, -1,
		ST_Transform(ST_Expand(geom25833,expandby),4258)  as geo
		FROM mess.nor_pts AS pt1
		WHERE ST_Intersects(pt1.geom4258,p_in);
		GET DIAGNOSTICS num_rows = ROW_COUNT;
		SELECT p_in into boundary;
	END IF;

	
	RAISE NOTICE 'Total number of points % found for envelope with area %, % ', num_rows, ST_Area(boundary), ST_Astext(ST_Envelope(boundary));

		 	
	CREATE INDEX geoidx_geo_omr
	ON geo_omr
	USING gist(geo);


	-- compute intersected area
	UPDATE geo_omr  pt
	SET min_distance_trees=r1.min_distance_trees
	FROM (	SELECT
		pt1.gid AS gid,
		ST_Distance(ST_Transform(data2.geo,25833),ST_Centroid(ST_Transform(pt1.geo,25833))) AS min_distance_trees

		FROM 
		geo_omr AS pt1,
		sk_grl.fkb_naturinfo_punkt AS data2
		WHERE 
		ST_Transform(data2.geo,4258) && boundary AND -- 100% times faster with 
		ST_Intersects(ST_Transform(data2.geo,4258),pt1.geo)
	) AS r1
	WHERE pt.gid = r1.gid ;


	-- set verry good area
	UPDATE geo_omr  pt SET value=100 WHERE pt.min_distance_trees > 0 AND pt.min_distance_trees < 100;
	GET DIAGNOSTICS num_rows = ROW_COUNT;
	RAISE NOTICE '% rows with value 100', num_rows;


	-- ok area ver
	UPDATE geo_omr  pt SET value=-100 WHERE pt.min_distance_trees > 100;
	GET DIAGNOSTICS num_rows = ROW_COUNT;
	RAISE NOTICE '% rows with value - 100', num_rows;

		
	FOR returnrec IN SELECT gid,value FROM geo_omr LOOP
        RETURN NEXT returnrec;
    	END LOOP;

    
	DROP TABLE geo_omr;



END;
$BODY$ LANGUAGE plpgsql;

drop table if exists mess.view_4_3_3;
CREATE table mess.view_4_3_3 AS
  	SELECT (r1).function_4_3_3.gid::bigint, (r1).function_4_3_3.value::integer
	FROM (
		select mess.function_4_3_3(ST_GeomFromText('POLYGON EMPTY'))
	) as r1;

CREATE OR REPLACE VIEW mess.view_4_3_3_quick AS
  	SELECT (r1).function_4_3_3.gid::bigint, (r1).function_4_3_3.value::integer
	FROM (
		select mess.function_4_3_3(ST_GeomFromText('SRID=4258;POLYGON((10.6558688136438 59.3402438918609,10.6466824831826 59.4118779477458,10.8399481744994 59.4181898901846,10.8487296062088 59.3465379468792,10.6558688136438 59.3402438918609))'))
	) as r1;





